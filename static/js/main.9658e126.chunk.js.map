{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/Producto.jsx","components/Carrito.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","titulo","id","className","Footer","fecha","Producto","producto","carrito","agregarProducto","productos","nombre","precio","type","onClick","filter","seleccionarProducto","eliminarProducto","Carrito","length","map","App","Date","getFullYear","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAwDeA,MAtCf,YAA0B,IAATC,EAAQ,EAARA,OAkCb,OAAQ,oBAAIC,GAAG,aAAaC,UAAU,aAA9B,SAA4CF,KCzBzCG,EAPA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACP,iCACI,oEAAyCA,Q,OC6CtCC,EAhEE,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,UAG5CR,EAAsBK,EAAtBL,GAAIS,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,OA8BnB,OACI,gCACI,6BAAKD,IACL,kCAAKC,KAMJF,EAEO,wBACIG,KAAK,SAGLC,QAAW,kBA3CH,SAAAZ,GAIxB,IAAMK,EAAWG,EAAUK,QAAQ,SAAAR,GAAQ,OAAIA,EAASL,KAAOA,KAAI,GAMnEO,EAAgB,GAAD,mBACRD,GADQ,CAEXD,KA+B6BS,CAAoBd,IAJzC,qBAUA,wBACIW,KAAK,SACLC,QAAW,kBAlCN,SAAAZ,GAKrB,IAAMK,EAAWC,EAAQO,QAAQ,SAAAR,GAAQ,OAAIA,EAASL,KAAOA,KAG7DO,EAAgBF,GA0BiBU,CAAiBf,IAFtC,0BCxBLgB,G,MA3BC,SAAC,GAAD,IAAEV,EAAF,EAAEA,QAASC,EAAX,EAAWA,gBAAX,OACZ,sBAAKN,UAAU,UAAf,UACI,uDAIoB,IAAnBK,EAAQW,OAEL,+DAIAX,EAAQY,KAAI,SAAAb,GAAQ,OAEhB,aADA,CACC,EAAD,CAEIA,SAAUA,EACVC,QAASA,EACTC,gBAAiBA,GAHZF,EAASL,YCgDnBmB,MA5Df,WAGA,IAAMhB,GAAQ,IAAIiB,MAAOC,cAMzB,EAAsCC,mBAAS,CAC7C,CAAEtB,GAAI,EAAGS,OAAQ,iBAAkBC,OAAQ,IAC3C,CAAEV,GAAI,EAAGS,OAAQ,eAAgBC,OAAQ,IACzC,CAAEV,GAAI,EAAGS,OAAQ,iBAAkBC,OAAQ,IAC3C,CAAEV,GAAI,EAAGS,OAAQ,iBAAkBC,OAAQ,MAJ7C,mBAAOF,EAAP,KAYA,GAZA,KAYmCc,mBAAS,KAA5C,mBAAOhB,EAAP,KAAgBC,EAAhB,KAKE,OAGI,cAFF,CAEG,WAAD,WAGI,cAAC,EAAD,CAAQR,OAAO,mBAEf,oDAGCS,EAAUU,KAAI,SAAAb,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAUA,EACVG,UAAWA,EACXF,QAASA,EACTC,gBAAiBA,GAJZF,EAASL,OAQpB,cAAC,EAAD,CACIM,QAASA,EACTC,gBAAiBA,IAIrB,cAAC,EAAD,CAAQJ,MAAOA,QClDVoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9658e126.chunk.js","sourcesContent":["\r\n\r\n// \"TIPO DE FUNCIONES\" PARA CREAR UN COMPONENTE\r\n\r\n// Creamos el componente haciendo uso una FUNCIÓN de tipo \"Function Declaration\", \r\n// por lo general es una funcion con un \"retur\"n que retorna etiquetas.\r\n\r\n// \"PROPS\" PARA EL ENVIO DE PARAMETROS A LA FUNCION DEL COMPONENTE\r\n\r\n// Enviamos como parametros de la función, los PROPS.\r\n// PROPS: Son parametros que enviamos medianto los atributos de una etiquetas/componentes desde el componente principal\r\n// de la siguiente manera: <Header titulo=\"Tienda Virtual\"/>\r\n//                         function Header(props){ return(<h1 id=\"encabezado\" className=\"encabezado\">{props.titulo}</h1> )}\r\n\r\n// Otra manera mas moderna, sería aplicar DESTRUCTURING (agregamos entre llaves directamente el nombre de la llave del objeto y la definimos de igualmanera) \r\n// en la funcion del componente, para tomar los parametros de una manera mas sencilla\r\n// y nos ahorramos tener que hacer uso de la sintaxis de puntos de los objetos.\r\n// Una herramienta muy util que nos permitirá visualisar los PROPS de cada componente, es la extención \"React Developer Tools\" (Disponible para chrome y fire fox)\r\nfunction Header({titulo}){\r\n\r\n    // // 1) Logica antes de retornar las etiquetas\r\n    // const edad = 18\r\n\r\n    // let mensaje;\r\n    // if(edad  >= 18){\r\n    //     mensaje = \"Eres mayor de edad\";\r\n    // }else{\r\n    //     mensaje = \"Eres menor de edad\";\r\n    // }\r\n\r\n    // // Para imprimir variables JS dentro del return, utilizar corchetes \"{}\"\r\n    // return( <h1>{mensaje}</h1> )\r\n\r\n// --------------------------------------------------------------------------------------------------------------\r\n    \r\n    // 2) Asignar Clases e ID's a las etiquetas dentro del \"return\"\r\n    // Clases: Para asignar clases a etiquetas dentro del \"return\", deberán ir con el nombre \"className\",\r\n    //         por que \"class\" es una palabra reservada de JavaScript.\r\n    // ID's: Se asignan de manera igual a como se hace en HTML.\r\n\r\n    // return( <h1 id=\"encabezado\" className=\"encabezado\">Tienda Virtual</h1> )\r\n\r\n// --------------------------------------------------------------------------------------------------------------\r\n    \r\n    // 3) Creamos una plantilla html dinamica gracias a los PROPS,\r\n    // para utilizarlos utilizamos la sintaxis de JS para agregar el valor a la etiqueta de la siguient manera:\r\n\r\n    // return(<h1 id=\"encabezado\" className=\"encabezado\">{props.titulo}</h1>)    \r\n\r\n    // Otra manera mas moderna, sería aplicar DESTRUCTURING (agregamos entre llaves directamente el nombre de la llave del objeto y la definimos de igualmanera) \r\n    // en la funcion del componente, para tomar los parametros de una manera mas sencilla\r\n    // y nos ahorramos tener que hacer uso de la sintaxis de puntos de los objetos.\r\n    return( <h1 id=\"encabezado\" className=\"encabezado\">{titulo}</h1> )\r\n}\r\n\r\n// Una vez creado el componente lo exportamos con la siguiente sintaxis\r\nexport default Header;","\r\n// \"TIPO DE FUNCIONES\" PARA CREAR UN COMPONENTE\r\n\r\n// Creamos el componente haciendo uso de una función de tipo \"Function Expression\", \r\n// La diferencia entre crear un componente con \"Function Declaration\" y \"Function Expression\",\r\n// es que con \"Function Expression\" si no requerimos de logica antes del \"return\", tan solo podemos\r\n// eliminar los corchetes \"{}\" y el \"return\", quedando de la siguiente forma.\r\n// Cosa que con \"Function Declaration\" no podriamos hacer esto por cuestiones de sintaxis.\r\n\r\n// \"PROPS\" PARA EL ENVIO DE PARAMETROS A LA FUNCION DEL COMPONENTE\r\n\r\n// Enviamos como parametros de la función, los PROPS.\r\n// PROPS: Son parametros que enviamos medianto los atributos de una etiquetas/componentes desde el componente principal\r\n// de la siguiente manera: <Header titulo=\"Tienda Virtual\"/>\r\n//                         function Header(props){ return(<h1 id=\"encabezado\" className=\"encabezado\">{props.titulo}</h1> )}\r\n\r\n// Otra manera mas moderna, sería aplicar DESTRUCTURING (agregamos entre llaves directamente el nombre de la llave del objeto y la definimos de igualmanera) \r\n// en la funcion del componente, para tomar los parametros de una manera mas sencilla\r\n// y nos ahorramos tener que hacer uso de la sintaxis de puntos de los objetos.\r\n// Una herramienta muy util que nos permitirá visualisar los PROPS de cada componente, es la extención \"React Developer Tools\" (Disponible para chrome y fire fox)\r\nconst Footer = ({fecha}) =>  ( \r\n        <footer>\r\n            <p>Todos los derechos reservados &copy; {fecha}</p>\r\n        </footer> \r\n);\r\n\r\n \r\nexport default Footer;","\r\n// Utilizamos sintaxis llamada \"Destructuring\" para obtener el producto del PROPS y\r\n// no tener que utilizar la sintaxis de puntos, por ej: props.producto.nombre\r\nconst Producto = ({producto, carrito, agregarProducto, productos}) => {\r\n\r\n    // Utilizamos sintaxis llamada \"Destructuring\" para definir una variable con el valor del array/objeto al mismo tiempo.\r\n    const {id, nombre, precio} = producto;\r\n    // Creamos una función que sera asignado al evento \"onClick\" del botón de la Lista de Productos\r\n    const seleccionarProducto = id => {\r\n        // Filtramos el array de \"Productos\" con el \"id\" del producto seleccionado que pasamos por parametro de la función\r\n        // .filter(): Es un \"array method\" parecido al .map(), ya que este tambien itera sobre el array y crea uno nuevo.\r\n        // La diferencia de .filter() de .map(), es que .filter() filtrará los elementes del array según el parametro que le pasemos.\r\n        const producto = productos.filter( producto => producto.id === id)[0];\r\n        \r\n        // agregarProducto(): Es la función del \"useState\" para modificar los elementos del array \"carrito\"\r\n        // Utilizamos la sintaxis de \"...\" llamado \"Spread Operator\" para clonar el array \"carrito\"\r\n        // Le pasamos como 1er parametro un array con la copia del array \"carrito\"\r\n        // para que persistan los datos que le vayamos pasando en el 2do parametro\r\n        agregarProducto([\r\n            ...carrito,  // <- Arreglo con los elementos que se quiere mantener\r\n            producto     // <- Elemento de un arreglo que se esta agregando\r\n        ]);\r\n    }\r\n\r\n    // Creamos una función que sera asignado al evento \"onClick\" del botón del Carrito\r\n    const eliminarProducto = id => {\r\n        // Filtramos el array de \"Productos\" con el \"id\" del producto seleccionado que pasamos por parametro de la función,\r\n        // Agregamos la condución que arme un array sin el producto que estamos seleccionando (Ya que al que seleccionamos, es el que queremos eliminar del carrito)\r\n        // .filter(): Es un \"array method\" parecido al .map(), ya que este tambien itera sobre el array y crea uno nuevo.\r\n        // La diferencia de .filter() de .map(), es que .filter() filtrará los elementes del array según el parametro que le pasemos.\r\n        const producto = carrito.filter( producto => producto.id !== id);\r\n         // agregarProducto(): Es la función del \"useState\" para modificar los elementos del array \"carrito\"\r\n         // Le pasamos como parametro un array sin el elemento que seleccionamos (por que se lo quiere eliminar al dar click en el botón \"Eliminar\")\r\n        agregarProducto(producto) // <- Arreglo sin el elemento que se quito del filtro (\".filter()\")\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <h2>{nombre}</h2>\r\n            <p>${precio}</p>\r\n\r\n            {/* Verificamos si se le esta pasando el parametro \"productos\" en el caso que SI, detectamos que estamos del lado \"Lista de Productos\",\r\n                y agregamos el botón \"Comprar\".\r\n                Y si NO se le esta pasando el parametro \"productos\", detectamos que estamos del lado del \"Carrito\", y agregamos el botón \"Eliminar\"*/}\r\n            {/* INFO: La unica manera de agregar condicionales dentro del \"return\", es con los operadores ternarios */}\r\n            {productos\r\n                ?\r\n                    <button\r\n                        type=\"button\"\r\n                        /* De este modo asignamos una función a un evento,\r\n                            Si no utilizaramos el \"arrow function\", la funcíon no esperaría el evento del componente y se ejecutaría al cargar la pagina */\r\n                        onClick= { () => seleccionarProducto(id) }\r\n                        >Comprar\r\n                    </button>\r\n                :\r\n                      /* De este modo asignamos una función a un evento,\r\n                       Si no utilizaramos el \"arrow function\", la funcíon no esperaría el evento del componente y se ejecutaría al cargar la pagina */\r\n                    <button\r\n                        type=\"button\"\r\n                        onClick= { () => eliminarProducto(id) }\r\n                        >Eliminar\r\n                    </button>\r\n            }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Producto;","// Importamos las Clases CSS\r\nimport './Carrito.css';\r\n// Importamos un Componente para reutilizarlo\r\nimport Producto from './Producto';\r\n\r\n// Definimos el componente dando por implicito el \"return\" por lo tanto sacamos el \"return\" y las \"{}\", dejando solo los \"()\"\r\nconst Carrito = ({carrito, agregarProducto}) =>  ( \r\n    <div className=\"carrito\">\r\n        <h2>Tu Carrito de Compras</h2>\r\n\r\n        {/* TENER ENCUENTA: dentro del \"return\" no se puede agregar condicionales \"IF\", pero si se puede utilizar los \"OPERADORES TERNARIOS\" */}\r\n        {/* Se verifica si existen productos dentro del carrito o no, y segun lo que se tenga, se imprime por pantalla */}\r\n        {carrito.length === 0 ?\r\n\r\n            <p>No hay productos en el carrito</p>\r\n\r\n        :\r\n            // Recorremos el \"carrito\" y reutilizamos el componente \"Producto\" para ir mostrando los productos en el \"Carrito\"\r\n            carrito.map(producto => (\r\n                // Como podemos observar, no es obligatorio pasar todos los PROPS que tenga el componente\r\n                <Producto \r\n                    key={producto.id} // Enviamos un PROPS con el atributo \"key\", por que sino nos tira un error por consola por no enviar un elemento unico.\r\n                    producto={producto}\r\n                    carrito={carrito}\r\n                    agregarProducto={agregarProducto} // Pasamos por PROPS la función  del \"useState\" que modificará el carrito\r\n                />\r\n            ))\r\n        }\r\n\r\n    </div>\r\n);\r\n\r\n \r\nexport default Carrito;","// Importamos la libreria \"Fragment\" que viene con React para poder utilizar los beneficios\r\n// de la etiqueta/componente <Fragment></Fragment>\r\nimport React, {Fragment, useState} from \"react\";\r\n// Importamos los Componente\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Producto from './components/Producto';\r\nimport Carrito from './components/Carrito';\r\n\r\nfunction App() {\r\n\r\n// Creamos variables o condicionales en este espacio\r\nconst fecha = new Date().getFullYear();\r\n\r\n// Creamos listado de productos utilizando la función \"useStates\"\r\n// Creamos un array con \"destructuring\" y el 1er parametro obtendra los valores del \"useState\" y el 2do será la función que modifique a este.\r\n// RECORDAR: no se puede modificar los valores que contenga un \"useState\" sobrescribiendo los valores, se tiene que utilizar la función\r\n//           que le pasamos como 2do parametro\r\nconst [productos, guardarProductos] = useState([\r\n  { id: 1, nombre: 'Camisa ReactJS', precio: 50},\r\n  { id: 2, nombre: 'Camisa VueJS', precio: 50},\r\n  { id: 3, nombre: 'Camisa Node.js', precio: 50},\r\n  { id: 4, nombre: 'Camisa Angular', precio: 50},\r\n]);\r\n\r\n// Creamos el Carrito utilizando la función \"useStates\"\r\n// Creamos un array con \"destructuring\" y el 1er parametro obtendra los valores del \"useState\" y el 2do será la función que modifique a este.\r\n// Siempre se tiene que agregar un valor para inicialisar el \"useState\", puede contener datos o valores de inicio como por ejemplo: \"{}\", \"[]\", '', 0, false\r\n// RECORDAR: no se puede modificar los valores que contenga un \"useState\" sobrescribiendo los valores, se tiene que utilizar la función\r\n//           que le pasamos como 2do parametro\r\nconst [carrito, agregarProducto] = useState([])\r\n\r\n// ============================================================================================================================================\r\n\r\n// Dentro del \"return\" solo se agregan las etiquetas de los componentes y sus correspondientes PROPS\r\n  return (\r\n    // Al utilizar la etiqueta/componente  <Fragment></Fragment>, este no crea etiquetas HTML de mas\r\n    // Solo creara las etiquetas de los componentes que lleva dentro.\r\n      <Fragment>\r\n          {/* Utilizamos los componentes creado */}\r\n          {/*Enviamos los PROPS como si asignaramos valores a un atributo de una etiqueta (por ejemplo los props \"titulo\" y \"fecha\")*/}\r\n          <Header titulo=\"Tienda Virtual\"/>\r\n\r\n          <h1>Lista de Productos</h1>\r\n          {/*.map() es la funcion que se utiliza mas en React para recorrer objetos/array, por eso lo utilizamos.\r\n             No utiliamos los corchetes en el .map() ya que los parentecis () dan por implicito que se retornará los valores que se encuentren dentro.*/}\r\n          {productos.map(producto => (\r\n            <Producto \r\n                key={producto.id} // Enviamos un PROPS con el atributo \"key\", por que sino nos tira un error por consola por no enviar un elemento unico.\r\n                producto={producto}\r\n                productos={productos}\r\n                carrito={carrito}\r\n                agregarProducto={agregarProducto} // Pasamos por PROPS la función  del \"useState\" que modificará el carrito\r\n            />\r\n          ))}\r\n\r\n          <Carrito \r\n              carrito={carrito}\r\n              agregarProducto={agregarProducto} // Pasamos por PROPS la función  del \"useState\" que modificará el carrito\r\n          />\r\n\r\n          {/*A continuación se muestra un ejemplo de como envíar un valor como props utilizando una variable y sintaxis JS*/}\r\n          <Footer fecha={fecha}/>\r\n      </Fragment>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// Si desea comenzar a medir el rendimiento en su aplicación, pase una función\r\n// para registrar resultados (por ejemplo: reportWebVitals(console.log))\r\n// o enviar a un punto final de análisis. Más información: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}